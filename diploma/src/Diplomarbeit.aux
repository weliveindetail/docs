\relax 
\catcode`"\active
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
\newlabel{sec:declaration}{{}{3}{Selbstständigkeitserklärung\relax }{section*.1}{}}
\citation{Hughes}
\citation{JHyde}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Einleitung}{7}{chapter.1}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{sec:intro}{{1}{7}{Einleitung\relax }{chapter.1}{}}
\@writefile{brf}{\backcite{Hughes}{{7}{1}{chapter.1}}}
\@writefile{brf}{\backcite{JHyde}{{7}{1}{chapter.1}}}
\citation{JHyde}
\@writefile{brf}{\backcite{JHyde}{{8}{1}{defBase.1.0.1}}}
\citation{Reaktor}
\citation{Labview}
\citation{Max}
\citation{Paxson}
\@writefile{brf}{\backcite{Reaktor}{{9}{2}{Hfootnote.2}}}
\@writefile{brf}{\backcite{Labview}{{9}{2}{Hfootnote.2}}}
\@writefile{brf}{\backcite{Max}{{9}{2}{Hfootnote.2}}}
\@writefile{brf}{\backcite{Paxson}{{10}{1}{defBase.1.0.2}}}
\citation{ComparingGplsAndDsls}
\citation{DslBib}
\citation{Spinellis}
\citation{LanguageWorkbenches}
\citation{GenerativeProgramming}
\citation{Mernik05}
\citation{DegreesOfFreedom}
\citation{Mernik05}
\citation{rake}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Technischer Kontext}{11}{chapter.2}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{sec:context}{{2}{11}{Technischer Kontext\relax }{chapter.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Dom\"anenspezifische Programmiersprachen}{11}{section.2.1}}
\newlabel{sec:context-dsls}{{2.1}{11}{Domänenspezifische Programmiersprachen\relax }{section.2.1}{}}
\@writefile{brf}{\backcite{ComparingGplsAndDsls}{{11}{2.1}{section.2.1}}}
\@writefile{brf}{\backcite{DslBib}{{11}{2.1}{section.2.1}}}
\@writefile{brf}{\backcite{Spinellis}{{11}{2.1}{section.2.1}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Differenzierung}{11}{subsection.2.1.1}}
\newlabel{sec:context-dsls-differentiation}{{2.1.1}{11}{Differenzierung\relax }{subsection.2.1.1}{}}
\@writefile{brf}{\backcite{LanguageWorkbenches}{{11}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{GenerativeProgramming}{{11}{1}{Hfootnote.3}}}
\citation{Mernik05}
\citation{sql}
\citation{Mernik05}
\citation{atmol}
\@writefile{brf}{\backcite{Mernik05}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{DegreesOfFreedom}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{Mernik05}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{rake}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{Mernik05}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{sql}{{12}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{Mernik05}{{12}{2.1.1}{subsection.2.1.1}}}
\citation{Labview}
\citation{Simulink}
\citation{Subtext}
\citation{DslCaseStudy}
\citation{DslEclipse}
\citation{Spinellis}
\citation{LanguageWorkbenches}
\citation{DslRequirements}
\citation{Ward}
\citation{LanguageWorkbenches}
\citation{Mernik05}
\citation{mps}
\citation{InterntionalSoftware}
\citation{InterntionalSoftware}
\@writefile{brf}{\backcite{atmol}{{13}{2.1.1}{subsection.2.1.1}}}
\newlabel{sec:context-dsls-differentiation-notation}{{2.1.1}{13}{Differenzierung\relax }{subsection.2.1.1}{}}
\@writefile{brf}{\backcite{Labview}{{13}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{Simulink}{{13}{2.1.1}{subsection.2.1.1}}}
\@writefile{brf}{\backcite{Subtext}{{13}{2.1.1}{subsection.2.1.1}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.2}Werkzeugunterst\"utzung}{13}{subsection.2.1.2}}
\newlabel{sec:context-dsls-tools}{{2.1.2}{13}{Werkzeugunterstützung\relax }{subsection.2.1.2}{}}
\@writefile{brf}{\backcite{DslCaseStudy}{{13}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{DslEclipse}{{13}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{Spinellis}{{13}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{LanguageWorkbenches}{{13}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{DslRequirements}{{13}{2.1.2}{subsection.2.1.2}}}
\citation{EndUserDevEnv}
\citation{EndUserDevEnv}
\citation{EndUserDevEnv}
\@writefile{brf}{\backcite{Ward}{{14}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{LanguageWorkbenches}{{14}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{Mernik05}{{14}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{mps}{{14}{2.1.2}{subsection.2.1.2}}}
\@writefile{brf}{\backcite{InterntionalSoftware}{{14}{2.1.2}{subsection.2.1.2}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.3}Nutzergruppen}{14}{subsection.2.1.3}}
\newlabel{sec:context-dsls-users}{{2.1.3}{14}{Nutzergruppen\relax }{subsection.2.1.3}{}}
\@writefile{brf}{\backcite{EndUserDevEnv}{{14}{2.1.3}{subsection.2.1.3}}}
\@writefile{brf}{\backcite{EndUserDevEnv}{{14}{2.1.3}{subsection.2.1.3}}}
\@writefile{brf}{\backcite{InterntionalSoftware}{{14}{3}{Hfootnote.5}}}
\@writefile{brf}{\backcite{EndUserDevEnv}{{15}{2.1.3}{subsection.2.1.3}}}
\citation{HowDebuggersWork}
\citation{HowDebuggersWork}
\citation{JHyde}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Debugging Techniken}{16}{section.2.2}}
\newlabel{sec:context-debugging}{{2.2}{16}{Debugging Techniken\relax }{section.2.2}{}}
\@writefile{brf}{\backcite{HowDebuggersWork}{{16}{2.2}{section.2.2}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Grundlagen}{16}{subsection.2.2.1}}
\newlabel{sec:context-debugging-basics}{{2.2.1}{16}{Grundlagen\relax }{subsection.2.2.1}{}}
\@writefile{brf}{\backcite{HowDebuggersWork}{{16}{2.2.1}{subsection.2.2.1}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}Verfahren}{16}{subsection.2.2.2}}
\citation{ReverseExecution}
\citation{Replay}
\citation{JHyde}
\citation{DbgBackwardsInTime}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.2.1}Trace-Debugging}{17}{subsubsection.2.2.2.1}}
\newlabel{sec:context-debugging-trace}{{2.2.2.1}{17}{Trace-Debugging\relax }{subsubsection.2.2.2.1}{}}
\@writefile{brf}{\backcite{JHyde}{{17}{2.2.2.1}{subsubsection.2.2.2.1}}}
\@writefile{brf}{\backcite{JHyde}{{17}{2.2.2.1}{subsubsection.2.2.2.1}}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.2.2}Andere Debugging-Ans\"atze}{17}{subsubsection.2.2.2.2}}
\newlabel{sec:context-debugging-others}{{2.2.2.2}{17}{Andere Debugging-Ansätze\relax }{subsubsection.2.2.2.2}{}}
\@writefile{brf}{\backcite{DbgBackwardsInTime}{{17}{2.2.2.2}{subsubsection.2.2.2.2}}}
\@writefile{brf}{\backcite{ReverseExecution}{{17}{6}{Hfootnote.8}}}
\@writefile{brf}{\backcite{Replay}{{17}{6}{Hfootnote.8}}}
\citation{AlgorithmicDebug}
\citation{JHyde}
\citation{HowDebuggersWork}
\@writefile{brf}{\backcite{AlgorithmicDebug}{{18}{2.2.2.2}{subsubsection.2.2.2.2}}}
\@writefile{brf}{\backcite{JHyde}{{18}{2.2.2.2}{subsubsection.2.2.2.2}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.3}Weitere Klassifizierung}{18}{subsection.2.2.3}}
\newlabel{sec:context-debugging-classes}{{2.2.3}{18}{Weitere Klassifizierung\relax }{subsection.2.2.3}{}}
\citation{HowDebuggersWork}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.4}Funktionsweise herk\"ommlicher Debugger}{19}{subsection.2.2.4}}
\newlabel{sec:context-debugging-separate}{{2.2.4}{19}{Funktionsweise herkömmlicher Debugger\relax }{subsection.2.2.4}{}}
\@writefile{brf}{\backcite{HowDebuggersWork}{{19}{2.2.4}{subsection.2.2.4}}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.4.1}Vorbetrachtung}{19}{subsubsection.2.2.4.1}}
\newlabel{sec:context-debugging-separate-prolog}{{2.2.4.1}{19}{Vorbetrachtung\relax }{subsubsection.2.2.4.1}{}}
\@writefile{brf}{\backcite{HowDebuggersWork}{{19}{7}{Hfootnote.9}}}
\citation{Intel3}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.4.2}Breakpoints}{20}{subsubsection.2.2.4.2}}
\newlabel{sec:context-debugging-separate-breakpoints}{{2.2.4.2}{20}{Breakpoints\relax }{subsubsection.2.2.4.2}{}}
\@writefile{brf}{\backcite{Intel3}{{20}{2.2.4.2}{subsubsection.2.2.4.2}}}
\citation{Intel3}
\@writefile{brf}{\backcite{Intel3}{{21}{2.2.4.2}{subsubsection.2.2.4.2}}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.4.3}Einzelschrittausf\"uhrung}{21}{subsubsection.2.2.4.3}}
\newlabel{sec:context-debugging-separate-stepping}{{2.2.4.3}{21}{Einzelschrittausführung\relax }{subsubsection.2.2.4.3}{}}
\citation{Paxson}
\citation{DosDebug}
\citation{FastBreakpoints}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.5}Same-Process Debugger}{23}{subsection.2.2.5}}
\newlabel{sec:context-debugging-same}{{2.2.5}{23}{Same-Process Debugger\relax }{subsection.2.2.5}{}}
\@writefile{brf}{\backcite{Paxson}{{23}{2.2.5}{subsection.2.2.5}}}
\@writefile{brf}{\backcite{DosDebug}{{23}{2.2.5}{subsection.2.2.5}}}
\@writefile{brf}{\backcite{FastBreakpoints}{{23}{2.2.5}{subsection.2.2.5}}}
\citation{FastBreakpoints}
\citation{FastBreakpoints}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces Darstellung der allgemeinen Form eines schnellen Breakpoints nach \cite  {FastBreakpoints}. Die urspr\"ungliche Operation an der Stelle der Breakpoint-Adresse wurde durch eine Verzweigungsoperation ersetzt, die eine Umleitung des Kontrollflusses initiiert. Innerhalb des Breakpoint-Codes k\"onnen beliebige Operationen im Ausf\"uhrungskontext des Pr\"uflings ausgef\"uhrt werden (invoke closure). Dessen Ausf\"uhrungszustand muss im Vorfeld gesichert und im Nachhinein wiederhergestellt werden. Schlie\IeC {\ss }lich kommt die urspr\"ungliche Operation zur Ausf\"uhrung, bevor der Kontrollfluss zum Pr\"uflingscode zur\"uckkehrt.\relax }}{24}{figure.caption.3}}
\@writefile{brf}{\backcite{FastBreakpoints}{{24}{2.1}{figure.caption.3}}}
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:fast-breakpoints}{{2.1}{24}{Darstellung der allgemeinen Form eines schnellen Breakpoints nach \cite {FastBreakpoints}. Die ursprüngliche Operation an der Stelle der Breakpoint-Adresse wurde durch eine Verzweigungsoperation ersetzt, die eine Umleitung des Kontrollflusses initiiert. Innerhalb des Breakpoint-Codes können beliebige Operationen im Ausführungskontext des Prüflings ausgeführt werden (invoke closure). Dessen Ausführungszustand muss im Vorfeld gesichert und im Nachhinein wiederhergestellt werden. Schließlich kommt die ursprüngliche Operation zur Ausführung, bevor der Kontrollfluss zum Prüflingscode zurückkehrt.\relax \relax }{figure.caption.3}{}}
\citation{Sparc}
\citation{FastDataBreakpoints}
\@writefile{brf}{\backcite{Sparc}{{25}{2.2.5}{figure.caption.3}}}
\@writefile{brf}{\backcite{FastDataBreakpoints}{{25}{2.2.5}{figure.caption.3}}}
\citation{Realtime}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Digitale Signalverarbeitung}{26}{section.2.3}}
\newlabel{sec:context-dsp}{{2.3}{26}{Digitale Signalverarbeitung\relax }{section.2.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Echtzeitverarbeitung}{26}{subsection.2.3.1}}
\newlabel{sec:context-dsp-realtime}{{2.3.1}{26}{Echtzeitverarbeitung\relax }{subsection.2.3.1}{}}
\citation{Steiner}
\citation{SuperCollider}
\citation{Max}
\citation{Reaktor}
\@writefile{brf}{\backcite{Realtime}{{27}{2.3.1}{subsection.2.3.1}}}
\newlabel{def:realtime}{{2.3.1}{27}{Echtzeitverarbeitung\relax }{defBase.2.3.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Softwarebasierte digitale Klangsynthese}{27}{subsection.2.3.2}}
\newlabel{sec:context-dsp-synth}{{2.3.2}{27}{Softwarebasierte digitale Klangsynthese\relax }{subsection.2.3.2}{}}
\@writefile{brf}{\backcite{Steiner}{{27}{2.3.2}{subsection.2.3.2}}}
\@writefile{brf}{\backcite{SuperCollider}{{27}{2.3.2}{subsection.2.3.2}}}
\@writefile{brf}{\backcite{Max}{{27}{2.3.2}{subsection.2.3.2}}}
\citation{Duden}
\citation{Audio101}
\citation{Audio101}
\@writefile{brf}{\backcite{Reaktor}{{28}{2.3.2}{subsection.2.3.2}}}
\@writefile{brf}{\backcite{Duden}{{28}{2.3.2}{subsection.2.3.2}}}
\@writefile{brf}{\backcite{Audio101}{{28}{2.3.2}{subsection.2.3.2}}}
\@writefile{brf}{\backcite{Audio101}{{28}{13}{Hfootnote.15}}}
\citation{Klangsynthese}
\citation{Labview}
\citation{Steiner}
\citation{Max}
\@writefile{toc}{\contentsline {section}{\numberline {2.4}Reaktor Core}{29}{section.2.4}}
\newlabel{sec:context-core}{{2.4}{29}{Reaktor Core\relax }{section.2.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.1}Programmierumgebung}{29}{subsection.2.4.1}}
\newlabel{sec:context-core-env}{{2.4.1}{29}{Programmierumgebung\relax }{subsection.2.4.1}{}}
\@writefile{brf}{\backcite{Klangsynthese}{{29}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{Labview}{{29}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{Steiner}{{29}{2.4.1}{subsection.2.4.1}}}
\@writefile{brf}{\backcite{Max}{{29}{2.4.1}{subsection.2.4.1}}}
\citation{CoreReference}
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces Testumgebung f\"ur einen Low-Pass Filter in Reaktor. Position und Darstellung der Bedienelemente werden in der Panel-Ansicht (unten) festgelegt. Ihre Aufgaben im Instrument gehen aus den Verkn\"upfungen in der Struktur-Ansicht (oben) hervor.\relax }}{30}{figure.caption.4}}
\newlabel{fig:low-pass-filter-primary}{{2.2}{30}{Testumgebung für einen Low-Pass Filter in Reaktor. Position und Darstellung der Bedienelemente werden in der Panel-Ansicht (unten) festgelegt. Ihre Aufgaben im Instrument gehen aus den Verknüpfungen in der Struktur-Ansicht (oben) hervor.\relax \relax }{figure.caption.4}{}}
\@writefile{brf}{\backcite{CoreReference}{{30}{14}{Hfootnote.16}}}
\citation{CoreReference}
\citation{FilterDesign}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.2}Einf\"uhrendes Beispiel}{31}{subsection.2.4.2}}
\newlabel{sec:context-core-example}{{2.4.2}{31}{Einführendes Beispiel\relax }{subsection.2.4.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces Implementierung eines einfachen Low-Pass Filters in Reaktor Core. Im oberen Teil der Abbildung ist die Struktur der Core Cell zu sehen. Module sind gr\"un und Macros grau dargestellt. Die Struktur des Macros "`x mul a"' ist in der zweiten Strukturansicht im unteren Teil dargestellt.\relax }}{31}{figure.caption.5}}
\newlabel{fig:low-pass-filter}{{2.3}{31}{Implementierung eines einfachen Low-Pass Filters in Reaktor Core. Im oberen Teil der Abbildung ist die Struktur der Core Cell zu sehen. Module sind grün und Macros grau dargestellt. Die Struktur des Macros "`x mul a"' ist in der zweiten Strukturansicht im unteren Teil dargestellt.\relax \relax }{figure.caption.5}{}}
\@writefile{brf}{\backcite{CoreReference}{{32}{15}{Hfootnote.17}}}
\@writefile{brf}{\backcite{FilterDesign}{{32}{15}{Hfootnote.17}}}
\newlabel{thm:low-pass-filter-audio-handler}{{2.1}{33}{Einführendes Beispiel\relax }{equation.2.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.3}Grundlegende Arbeitsweise}{33}{subsection.2.4.3}}
\newlabel{sec:context-core-execution}{{2.4.3}{33}{Grundlegende Arbeitsweise\relax }{subsection.2.4.3}{}}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Konzeption}{35}{chapter.3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{sec:concept}{{3}{35}{Konzeption\relax }{chapter.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Vorbetrachtung}{35}{section.3.1}}
\newlabel{sec:concept-prolog}{{3.1}{35}{Vorbetrachtung\relax }{section.3.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Ausgangssituation}{35}{subsection.3.1.1}}
\newlabel{sec:concept-prolog-preface}{{3.1.1}{35}{Ausgangssituation\relax }{subsection.3.1.1}{}}
\citation{FastBreakpoints}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}Grundlegende Problematik und Zielstellung}{36}{subsection.3.1.2}}
\@writefile{brf}{\backcite{FastBreakpoints}{{36}{3.1.2}{subsection.3.1.2}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.3}Wahl des Debugging-Verfahrens}{36}{subsection.3.1.3}}
\newlabel{sec:concept-prolog-approach}{{3.1.3}{36}{Wahl des Debugging-Verfahrens\relax }{subsection.3.1.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Same-Process Debugger}{38}{section.3.2}}
\newlabel{sec:concept-sameprocess}{{3.2}{38}{Same-Process Debugger\relax }{section.3.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Breakpoints}{38}{subsection.3.2.1}}
\newlabel{sec:concept-sameprocess-breakpoints}{{3.2.1}{38}{Breakpoints\relax }{subsection.3.2.1}{}}
\newlabel{sec:concept-sameprocess-overwriting}{{3.2.1}{38}{Breakpoints\relax }{subsection.3.2.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Beispiel f\"ur das \"Uberschreiben von Folgebefehlen durch Breakpoints. Die Befehle A, B, C und D liegen im Speicher unmittelbar hintereinander. Nach A wird entweder B oder D ausgef\"uhrt (oben). Beim Setzen eines Breakpoints auf B wird ein Teil des Befehls D \"uberschrieben (unten). Dies \"andert die Programmsemantik, da D erreicht werden kann, bevor dessen urspr\"unglicher Befehlscode wiederhergestellt wurde.\relax }}{38}{figure.caption.6}}
\newlabel{fig:breakpoint}{{3.1}{38}{Beispiel für das Überschreiben von Folgebefehlen durch Breakpoints. Die Befehle A, B, C und D liegen im Speicher unmittelbar hintereinander. Nach A wird entweder B oder D ausgeführt (oben). Beim Setzen eines Breakpoints auf B wird ein Teil des Befehls D überschrieben (unten). Dies ändert die Programmsemantik, da D erreicht werden kann, bevor dessen ursprünglicher Befehlscode wiederhergestellt wurde.\relax \relax }{figure.caption.6}{}}
\citation{Intel2}
\citation{Intel2}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.1.1}L\"osung durch Ausrichtung der Maschinenbefehle}{39}{subsubsection.3.2.1.1}}
\newlabel{sec:concept-sameprocess-overwriting-align}{{3.2.1.1}{39}{Lösung durch Ausrichtung der Maschinenbefehle\relax }{subsubsection.3.2.1.1}{}}
\@writefile{brf}{\backcite{Intel2}{{39}{1}{Hfootnote.20}}}
\@writefile{brf}{\backcite{Intel2}{{39}{2}{Hfootnote.21}}}
\citation{Compiler}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.1.2}L\"osung durch Einteilung in sequenzielle Befehlsbl\"ocke}{40}{subsubsection.3.2.1.2}}
\newlabel{sec:concept-sameprocess-overwriting-blocks}{{3.2.1.2}{40}{Lösung durch Einteilung in sequenzielle Befehlsblöcke\relax }{subsubsection.3.2.1.2}{}}
\@writefile{brf}{\backcite{Compiler}{{40}{3.2.1.2}{subsubsection.3.2.1.2}}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.1.3}Nachbetrachtung}{41}{subsubsection.3.2.1.3}}
\newlabel{sec:concept-sameprocess-overwriting-conclusion}{{3.2.1.3}{41}{Nachbetrachtung\relax }{subsubsection.3.2.1.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Einzelschrittausf\"uhrung}{42}{subsection.3.2.2}}
\newlabel{sec:concept-sameprocess-stepping}{{3.2.2}{42}{Einzelschrittausführung\relax }{subsection.3.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.2.1}Voraussetzungen}{42}{subsubsection.3.2.2.1}}
\newlabel{sec:concept-sameprocess-stepping-preconditions}{{3.2.2.1}{42}{Voraussetzungen\relax }{subsubsection.3.2.2.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.2.2}Ablauf}{43}{subsubsection.3.2.2.2}}
\newlabel{sec:concept-sameprocess-stepping-execution}{{3.2.2.2}{43}{Ablauf\relax }{subsubsection.3.2.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.2.3}\"Uberlappungsproblem bei Schleifen}{43}{subsubsection.3.2.2.3}}
\newlabel{sec:concept-sameprocess-stepping-loops}{{3.2.2.3}{43}{Überlappungsproblem bei Schleifen\relax }{subsubsection.3.2.2.3}{}}
\citation{Intel2}
\@writefile{brf}{\backcite{Intel2}{{44}{3.2.2.3}{subsubsection.3.2.2.3}}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces Beispiel des \"Uberlappungsproblems bei Schleifen. Die Ausgangspunkte bilden die in A.0 und B.0 dargestellten sequenziellen Befehlsbl\"ocke. Beide beginnen mit einer Schleifenanweisung bei $s_5$. Dargestellt sind ebenfalls die vorgelagerten Puffer bei $s_0$. Das Sprungziel der Schleifenanweisung in A.0 ist die Speicherstelle $s_5$ (die Schleifenanweisung selbst). B.0 zeigt die korrigierte Variante. Hier erfolgt der Sprung im Wiederholungsfall zum Maschinenbefehl im Puffer bei $s_0$. Soll im Anschluss an eine Unterbrechung bei $s_5$ (A.2 bzw. B.2) die Ausf\"uhrung des urspr\"unglichen Maschinenbefehls in einem Einzelschritt erfolgen, m\"ussen tempor\"are Breakpoints an den Stellen der m\"oglichen Folgebefehle gesetzt werden. Im Falle des unkorrigierten Sprungbefehls in A wird der urspr\"ungliche Maschinenbefehl damit \"uberschrieben (A.3). Durch die Korrektur in B kann dies vermieden werden (B.3).\relax }}{45}{figure.caption.7}}
\newlabel{fig:minimal-loop}{{3.2}{45}{Beispiel des Überlappungsproblems bei Schleifen. Die Ausgangspunkte bilden die in A.0 und B.0 dargestellten sequenziellen Befehlsblöcke. Beide beginnen mit einer Schleifenanweisung bei $s_5$. Dargestellt sind ebenfalls die vorgelagerten Puffer bei $s_0$. Das Sprungziel der Schleifenanweisung in A.0 ist die Speicherstelle $s_5$ (die Schleifenanweisung selbst). B.0 zeigt die korrigierte Variante. Hier erfolgt der Sprung im Wiederholungsfall zum Maschinenbefehl im Puffer bei $s_0$. Soll im Anschluss an eine Unterbrechung bei $s_5$ (A.2 bzw. B.2) die Ausführung des ursprünglichen Maschinenbefehls in einem Einzelschritt erfolgen, müssen temporäre Breakpoints an den Stellen der möglichen Folgebefehle gesetzt werden. Im Falle des unkorrigierten Sprungbefehls in A wird der ursprüngliche Maschinenbefehl damit überschrieben (A.3). Durch die Korrektur in B kann dies vermieden werden (B.3).\relax \relax }{figure.caption.7}{}}
\citation{MacRealtime}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Echtzeitf\"ahigkeit}{46}{section.3.3}}
\newlabel{sec:concept-realtime}{{3.3}{46}{Echtzeitfähigkeit\relax }{section.3.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Ablauf der Echtzeitverarbeitung}{46}{subsection.3.3.1}}
\newlabel{sec:concept-realtime-conditions}{{3.3.1}{46}{Ablauf der Echtzeitverarbeitung\relax }{subsection.3.3.1}{}}
\@writefile{brf}{\backcite{MacRealtime}{{46}{3.3.1}{subsection.3.3.1}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Einf\"ugen von Breakpoints zur Laufzeit}{47}{subsection.3.3.2}}
\newlabel{sec:concept-realtime-breakpointinsertion}{{3.3.2}{47}{Einfügen von Breakpoints zur Laufzeit\relax }{subsection.3.3.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.2.1}Problematik blockierender Anweisungen}{47}{subsubsection.3.3.2.1}}
\newlabel{sec:concept-realtime-breakpointinsertion-locking}{{3.3.2.1}{47}{Problematik blockierender Anweisungen\relax }{subsubsection.3.3.2.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.2.2}L\"osung durch Callback-Points}{47}{subsubsection.3.3.2.2}}
\newlabel{sec:concept-realtime-breakpointinsertion-callbackpoint}{{3.3.2.2}{47}{Lösung durch Callback-Points\relax }{subsubsection.3.3.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Unterbrechung der Echtzeitverarbeitung}{48}{subsection.3.3.3}}
\newlabel{sec:concept-realtime-break}{{3.3.3}{48}{Unterbrechung der Echtzeitverarbeitung\relax }{subsection.3.3.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.3.1}Problembeschreibung}{48}{subsubsection.3.3.3.1}}
\newlabel{sec:concept-realtime-break-problem}{{3.3.3.1}{48}{Problembeschreibung\relax }{subsubsection.3.3.3.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.3.2}L\"osungsansatz}{49}{subsubsection.3.3.3.2}}
\newlabel{sec:concept-realtime-break-method}{{3.3.3.2}{49}{Lösungsansatz\relax }{subsubsection.3.3.3.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Manipulation des R\"ucksprungverhaltens von Funktionen. Im linken Teil ist der gew\"ohnliche Ausf\"uhrungsablauf bei der Verwendung von Funktionen dargestellt. Er folgt der Symmetrie von Funktionsaufruf und -r\"ucksprung. Im rechten Teil ist ein Ausf\"uhrungsablauf zu sehen, der in \ref  {sec:concept-realtime-break-concept} durch die Manipulation des R\"ucksprungverhaltens von Funktionen erreicht werden soll.\relax }}{49}{figure.caption.8}}
\newlabel{fig:stack-manipulation}{{3.3}{49}{Manipulation des Rücksprungverhaltens von Funktionen. Im linken Teil ist der gewöhnliche Ausführungsablauf bei der Verwendung von Funktionen dargestellt. Er folgt der Symmetrie von Funktionsaufruf und -rücksprung. Im rechten Teil ist ein Ausführungsablauf zu sehen, der in \ref {sec:concept-realtime-break-concept} durch die Manipulation des Rücksprungverhaltens von Funktionen erreicht werden soll.\relax \relax }{figure.caption.8}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.3.3}Konkretes L\"osungskonzept}{50}{subsubsection.3.3.3.3}}
\newlabel{sec:concept-realtime-break-concept}{{3.3.3.3}{50}{Konkretes Lösungskonzept\relax }{subsubsection.3.3.3.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.3.4}Anmerkungen}{52}{subsubsection.3.3.3.4}}
\newlabel{sec:concept-realtime-break-remarks}{{3.3.3.4}{52}{Anmerkungen\relax }{subsubsection.3.3.3.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}Zusammenfassung}{53}{section.3.4}}
\newlabel{sec:concept-summary}{{3.4}{53}{Zusammenfassung\relax }{section.3.4}{}}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Implementierung in Reaktor Core}{55}{chapter.4}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{sec:impl}{{4}{55}{Implementierung in Reaktor Core\relax }{chapter.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Funktionsumfang des Prototypen}{55}{section.4.1}}
\newlabel{sec:impl-functionality}{{4.1}{55}{Funktionsumfang des Prototypen\relax }{section.4.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Technische Realisierung von Reaktor Core}{56}{section.4.2}}
\newlabel{sec:impl-preface}{{4.2}{56}{Technische Realisierung von Reaktor Core\relax }{section.4.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Eigenschaften von Reaktor Core Programmen}{56}{subsection.4.2.1}}
\newlabel{sec:impl-preface-properties}{{4.2.1}{56}{Eigenschaften von Reaktor Core Programmen\relax }{subsection.4.2.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.2}Architektur}{56}{subsection.4.2.2}}
\newlabel{sec:impl-preface-architecture}{{4.2.2}{56}{Architektur\relax }{subsection.4.2.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces Integration des Moduls SRS in die bestehende Projektarchitektur. Die Kommunikation mit der grafischen Benutzeroberfl\"ache erfolgt \"uber das Schnittstellenmodul \emph  {SDI}. \relax }}{57}{figure.caption.9}}
\newlabel{fig:integration-srs}{{4.1}{57}{Integration des Moduls SRS in die bestehende Projektarchitektur. Die Kommunikation mit der grafischen Benutzeroberfläche erfolgt über das Schnittstellenmodul \emph {SDI}. \relax \relax }{figure.caption.9}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.3}Arbeitsweise von Reaktor Core}{57}{subsection.4.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.4}Ablauf der Kompilierung}{58}{subsection.4.2.4}}
\newlabel{sec:impl-preface-compilation}{{4.2.4}{58}{Ablauf der Kompilierung\relax }{subsection.4.2.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.2.4.1}Vorbereitungsphase}{58}{subsubsection.4.2.4.1}}
\newlabel{sec:impl-preface-compilation-prolog}{{4.2.4.1}{58}{Vorbereitungsphase\relax }{subsubsection.4.2.4.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.2.4.2}Compilezeit}{59}{subsubsection.4.2.4.2}}
\newlabel{sec:impl-preface-compilation-compile}{{4.2.4.2}{59}{Compilezeit\relax }{subsubsection.4.2.4.2}{}}
\citation{VirtualAllocProtect}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.2.4.3}Linkzeit}{60}{subsubsection.4.2.4.3}}
\newlabel{sec:impl-preface-compilation-link}{{4.2.4.3}{60}{Linkzeit\relax }{subsubsection.4.2.4.3}{}}
\@writefile{brf}{\backcite{VirtualAllocProtect}{{60}{3}{Hfootnote.33}}}
\citation{gof}
\citation{NullObjectPattern}
\@writefile{toc}{\contentsline {section}{\numberline {4.3}Aufgaben zur \"Ubersetzungszeit}{62}{section.4.3}}
\newlabel{sec:impl-compiletime}{{4.3}{62}{Aufgaben zur Übersetzungszeit\relax }{section.4.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.1}\"Uberblick}{62}{subsection.4.3.1}}
\newlabel{sec:impl-buildtime-overview}{{4.3.1}{62}{Überblick\relax }{subsection.4.3.1}{}}
\@writefile{brf}{\backcite{gof}{{62}{4.3.1}{subsection.4.3.1}}}
\@writefile{brf}{\backcite{NullObjectPattern}{{62}{4.3.1}{subsection.4.3.1}}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces \"Ubersicht zum Ablauf des Aufzeichnungsprozesses. Die \"Ubersetzung einer Core Cell wird in Folge von \"Anderungen der Datenbasis initiiert. Der Vorgang wird von einer Instanz der Klasse \emph  {SEC::Instrument} koordiniert. Sie instanziiert ebenfalls die \emph  {Debug-Data-Factory}. Die \"Ubersetzung erfolgt in drei Phasen. Programmdaten fallen dabei nur zur Compilezeit und zur Linkzeit nicht aber w\"ahrend der Vorbereitungsphase an.\relax }}{63}{figure.caption.10}}
\newlabel{fig:factory-workflow}{{4.2}{63}{Übersicht zum Ablauf des Aufzeichnungsprozesses. Die Übersetzung einer Core Cell wird in Folge von Änderungen der Datenbasis initiiert. Der Vorgang wird von einer Instanz der Klasse \emph {SEC::Instrument} koordiniert. Sie instanziiert ebenfalls die \emph {Debug-Data-Factory}. Die Übersetzung erfolgt in drei Phasen. Programmdaten fallen dabei nur zur Compilezeit und zur Linkzeit nicht aber während der Vorbereitungsphase an.\relax \relax }{figure.caption.10}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.2}Aufzeichnung der Programmelemente zur Compilezeit}{63}{subsection.4.3.2}}
\newlabel{sec:impl-buildtime-programdatacompile}{{4.3.2}{63}{Aufzeichnung der Programmelemente zur Compilezeit\relax }{subsection.4.3.2}{}}
\@writefile{lot}{\contentsline {table}{\numberline {4.1}{\ignorespaces Benachrichtigungen des Compilers an die Debug-Data-Factory beim Betreten und Verlassen von \"Ubersetzungsabschnitten zur Compilezeit\relax }}{64}{table.caption.11}}
\newlabel{tab:compiletime-calls}{{4.1}{64}{Benachrichtigungen des Compilers an die Debug-Data-Factory beim Betreten und Verlassen von Übersetzungsabschnitten zur Compilezeit\relax \relax }{table.caption.11}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.3}{\ignorespaces Schematische Darstellung der Kommunikation zwischen Compiler und Debug-Data-Factory zur Compilezeit. Benachrichtigungen zu Beginn und Ende von \"Ubersetzungsabschnitten stellen eine flexible M\"oglichkeit dar, den Aufbau des Pr\"uflings zu \"ubermitteln.\relax }}{65}{figure.caption.12}}
\newlabel{fig:factory-workflow-compilation}{{4.3}{65}{Schematische Darstellung der Kommunikation zwischen Compiler und Debug-Data-Factory zur Compilezeit. Benachrichtigungen zu Beginn und Ende von Übersetzungsabschnitten stellen eine flexible Möglichkeit dar, den Aufbau des Prüflings zu übermitteln.\relax \relax }{figure.caption.12}{}}
\citation{Compiler}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.3}Kontrollflussanalyse zur Linkzeit}{66}{subsection.4.3.3}}
\newlabel{sec:impl-buildtime-programdatalink}{{4.3.3}{66}{Kontrollflussanalyse zur Linkzeit\relax }{subsection.4.3.3}{}}
\@writefile{brf}{\backcite{Compiler}{{66}{4.3.3}{subsection.4.3.3}}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.3.1}Vorbetrachtung}{66}{subsubsection.4.3.3.1}}
\newlabel{sec:impl-buildtime-programdatalink-overview}{{4.3.3.1}{66}{Vorbetrachtung\relax }{subsubsection.4.3.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {4.2}{\ignorespaces Benachrichtigungen des Compilers an die Debug-Data-Factory beim Betreten und Verlassen von \"Ubersetzungsabschnitten zur Linkzeit\relax }}{67}{table.caption.13}}
\newlabel{tab:linktime-calls}{{4.2}{67}{Benachrichtigungen des Compilers an die Debug-Data-Factory beim Betreten und Verlassen von Übersetzungsabschnitten zur Linkzeit\relax \relax }{table.caption.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.4}{\ignorespaces Schematische Darstellung der Kommunikation zwischen Compiler und Debug-Data-Factory zur Linkzeit. Es kommt derselbe Benachrichtigungsmechanismus zum Einsatz wie auch schon zur Compilezeit.\relax }}{67}{figure.caption.14}}
\newlabel{fig:factory-workflow-linking}{{4.4}{67}{Schematische Darstellung der Kommunikation zwischen Compiler und Debug-Data-Factory zur Linkzeit. Es kommt derselbe Benachrichtigungsmechanismus zum Einsatz wie auch schon zur Compilezeit.\relax \relax }{figure.caption.14}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.3.2}Algorithmus zur Rekonstruktion des Kontrollflusses}{67}{subsubsection.4.3.3.2}}
\newlabel{sec:impl-buildtime-programdatalink-execution}{{4.3.3.2}{67}{Algorithmus zur Rekonstruktion des Kontrollflusses\relax }{subsubsection.4.3.3.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.5}{\ignorespaces Beispiel einer zu rekonstruierenden Verzweigungsstruktur. Die linearen Segmente sind in der Reihenfolge nummeriert, in der sie vom Linker verarbeitet werden. Nachfolger im Kontrollfluss sind mit Pfeilen markiert. F\"ur die Segmente 2 und 4 konnten bereits alle Nachfolger gefunden werden, w\"ahrend f\"ur die Segmente 0, 1, 3 und 5 noch Nachfolger erwartet werden. Alle ausgegrauten Elemente sind noch unbekannt.\relax }}{68}{figure.caption.15}}
\newlabel{fig:successor-diagram}{{4.5}{68}{Beispiel einer zu rekonstruierenden Verzweigungsstruktur. Die linearen Segmente sind in der Reihenfolge nummeriert, in der sie vom Linker verarbeitet werden. Nachfolger im Kontrollfluss sind mit Pfeilen markiert. Für die Segmente 2 und 4 konnten bereits alle Nachfolger gefunden werden, während für die Segmente 0, 1, 3 und 5 noch Nachfolger erwartet werden. Alle ausgegrauten Elemente sind noch unbekannt.\relax \relax }{figure.caption.15}{}}
\newlabel{lst:branching-thenelse}{{4.1}{70}{Implementierung der Funktionen zur Verwaltung von Branches in Pseudo-Code. Die Funktionen mit dem Präfix \emph {begin} erstellen untergeordnete Branches. Die Funktionen mit dem Präfix \emph {end} schließen diese wieder. Für die enthaltenen Segmente sind zu diesem Zeitpunkt noch nicht notwendigerweise alle Nachfolger gefunden worden. In allen Funktionen werden die Variablen \emph {currentBranch} und \emph {parentBranch} aktualisiert}{lstlisting.4.1}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4.1}Implementierung der Funktionen zur Verwaltung von Branches in Pseudo-Code. Die Funktionen mit dem Pr\"afix \emph  {begin} erstellen untergeordnete Branches. Die Funktionen mit dem Pr\"afix \emph  {end} schlie\IeC {\ss }en diese wieder. F\"ur die enthaltenen Segmente sind zu diesem Zeitpunkt noch nicht notwendigerweise alle Nachfolger gefunden worden. In allen Funktionen werden die Variablen \emph  {currentBranch} und \emph  {parentBranch} aktualisiert.}{70}{lstlisting.4.1}}
\newlabel{lst:branching-addsegment}{{4.2}{71}{Implementierung der Funktionen zur Registrierung eines Segments als Nachfolger vorheriger Segmente in Pseudo-Code. Neue Segmente werden vom Linker als Parameter der Funktion \emph {addRawCodeBlock} übergeben. Die Registrierung des neuen Segments als Nachfolger der offenen Segmente in untergeordneten Kind-Branches erfolgt durch Rekursion in der Funktion \emph {finalizePreviousNestedBranches}}{lstlisting.4.2}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4.2}Implementierung der Funktionen zur Registrierung eines Segments als Nachfolger vorheriger Segmente in Pseudo-Code. Neue Segmente werden vom Linker als Parameter der Funktion \emph  {addRawCodeBlock} \"ubergeben. Die Registrierung des neuen Segments als Nachfolger der offenen Segmente in untergeordneten Kind-Branches erfolgt durch Rekursion in der Funktion \emph  {finalizePreviousNestedBranches}.}{71}{lstlisting.4.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3.4}Anpassungen des Pr\"uflingsprogramms}{72}{subsection.4.3.4}}
\newlabel{sec:impl-buildtime-compilerchanges}{{4.3.4}{72}{Anpassungen des Prüflingsprogramms\relax }{subsection.4.3.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.4.1}Einf\"ugen von Puffern vor jedem Sprungziel}{72}{subsubsection.4.3.4.1}}
\newlabel{sec:impl-buildtime-compilerchanges-buffer}{{4.3.4.1}{72}{Einfügen von Puffern vor jedem Sprungziel\relax }{subsubsection.4.3.4.1}{}}
\citation{Intel2}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.3.4.2}Kompilierung des Callback-Points}{73}{subsubsection.4.3.4.2}}
\newlabel{sec:impl-buildtime-compilerchanges-callbackpoint}{{4.3.4.2}{73}{Kompilierung des Callback-Points\relax }{subsubsection.4.3.4.2}{}}
\@writefile{brf}{\backcite{Intel2}{{73}{9}{Hfootnote.39}}}
\newlabel{lst:callback-point}{{4.3}{74}{Maschinencode eines Callback-Points. Die Werte der kursiv dargestellten Variablen sind zur Übersetzungszeit bekannt und werden direkt in den Maschinencode geschrieben. In den Zeilen 2 und 3 wird der Wert des globalen Callback-Flags ausgelesen. Ist es gesetzt, wird der Zeiger auf den jeweiligen Handler in Zeile 7 als Funktionsparameter auf den Stack gelegt. Der Aufruf der Behandlungsroutine erfolgt in Zeile 8. In der überwiegenden Mehrheit der Durchläufe ist kein Callback nötig. Der Mehraufwand ist dann auf drei Maschinenbefehle begrenzt}{lstlisting.4.3}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4.3}Maschinencode eines Callback-Points. Die Werte der kursiv dargestellten Variablen sind zur \"Ubersetzungszeit bekannt und werden direkt in den Maschinencode geschrieben. In den Zeilen 2 und 3 wird der Wert des globalen Callback-Flags ausgelesen. Ist es gesetzt, wird der Zeiger auf den jeweiligen Handler in Zeile 7 als Funktionsparameter auf den Stack gelegt. Der Aufruf der Behandlungsroutine erfolgt in Zeile 8. In der \"uberwiegenden Mehrheit der Durchl\"aufe ist kein Callback n\"otig. Der Mehraufwand ist dann auf drei Maschinenbefehle begrenzt.}{74}{lstlisting.4.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4.4}Laufzeitprozess}{75}{section.4.4}}
\newlabel{sec:impl-runtime}{{4.4}{75}{Laufzeitprozess\relax }{section.4.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4.1}Voraussetzungen}{75}{subsection.4.4.1}}
\newlabel{sec:impl-runtime-preface}{{4.4.1}{75}{Voraussetzungen\relax }{subsection.4.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4.2}Breakpoints}{75}{subsection.4.4.2}}
\newlabel{sec:impl-runtime-breakpoints}{{4.4.2}{75}{Breakpoints\relax }{subsection.4.4.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.2.1}Vereinfachungen f\"ur die Einzelschrittausf\"uhrung}{75}{subsubsection.4.4.2.1}}
\newlabel{sec:impl-runtime-breakpoints-simplification}{{4.4.2.1}{75}{Vereinfachungen für die Einzelschrittausführung\relax }{subsubsection.4.4.2.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.2.2}Verwaltung von Breakpoints}{76}{subsubsection.4.4.2.2}}
\newlabel{sec:impl-runtime-breakpoints-management}{{4.4.2.2}{76}{Verwaltung von Breakpoints\relax }{subsubsection.4.4.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.2.3}Implementierung im Maschinencode}{76}{subsubsection.4.4.2.3}}
\newlabel{sec:impl-runtime-breakpoints-implemetation}{{4.4.2.3}{76}{Implementierung im Maschinencode\relax }{subsubsection.4.4.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.2.4}Die Funktion onHitBreakpoint}{77}{subsubsection.4.4.2.4}}
\newlabel{sec:impl-runtime-breakpoints-preparation}{{4.4.2.4}{77}{Die Funktion onHitBreakpoint\relax }{subsubsection.4.4.2.4}{}}
\citation{Intel2}
\citation{AlignedAlloc}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.2.5}Implementierung der Funktion onHitBreakpoint}{78}{subsubsection.4.4.2.5}}
\newlabel{sec:impl-runtime-breakpoints-onhitbreakpoint}{{4.4.2.5}{78}{Implementierung der Funktion onHitBreakpoint\relax }{subsubsection.4.4.2.5}{}}
\@writefile{brf}{\backcite{Intel2}{{78}{4.4.2.5}{subsubsection.4.4.2.5}}}
\@writefile{brf}{\backcite{AlignedAlloc}{{78}{4.4.2.5}{subsubsection.4.4.2.5}}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4.3}Realisierung von Unterbrechungen}{79}{subsection.4.4.3}}
\newlabel{sec:impl-runtime-stackforging}{{4.4.3}{79}{Realisierung von Unterbrechungen\relax }{subsection.4.4.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.1}Realisierung des separaten Stackspeichers}{80}{subsubsection.4.4.3.1}}
\newlabel{sec:impl-runtime-stackforging-memory}{{4.4.3.1}{80}{Realisierung des separaten Stackspeichers\relax }{subsubsection.4.4.3.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.2}Wahl des Entkopplungspunkts}{80}{subsubsection.4.4.3.2}}
\newlabel{sec:impl-runtime-stackforging-point}{{4.4.3.2}{80}{Wahl des Entkopplungspunkts\relax }{subsubsection.4.4.3.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.3}Umleitung des Aufrufstacks}{80}{subsubsection.4.4.3.3}}
\newlabel{sec:impl-runtime-stackforging-switch}{{4.4.3.3}{80}{Umleitung des Aufrufstacks\relax }{subsubsection.4.4.3.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.6}{\ignorespaces Schematische Darstellung der Manipulationen des Kontrollflusses zur Realisierung von Unterbrechungen. Funktionen deren Stackframes im separaten Stackspeicher aufgebaut werden, sind als Hexagons dargestellt. Das Erreichen eines Breakpoints im Pr\"uflingscode f\"uhrt zur Entkopplung des Aufrufstacks (1). Die Ausf\"uhrung im Echtzeit-Thread kehrt daraufhin zur\"uck und kann etwaige Zeitschranken einhalten. Nach der Unterbrechung \"ubernimmt der GUI-Thread die Ausf\"uhrung des Pr\"uflings (2). Der Echtzeit-Thread bleibt entkoppelt, bis das Ende des Pr\"uflings erreicht wird (4). Zuvor kann es zu beliebig vielen weiteren Unterbrechungen kommen (2 und 3).\relax }}{81}{figure.caption.19}}
\newlabel{fig:stack-forgery}{{4.6}{81}{Schematische Darstellung der Manipulationen des Kontrollflusses zur Realisierung von Unterbrechungen. Funktionen deren Stackframes im separaten Stackspeicher aufgebaut werden, sind als Hexagons dargestellt. Das Erreichen eines Breakpoints im Prüflingscode führt zur Entkopplung des Aufrufstacks (1). Die Ausführung im Echtzeit-Thread kehrt daraufhin zurück und kann etwaige Zeitschranken einhalten. Nach der Unterbrechung übernimmt der GUI-Thread die Ausführung des Prüflings (2). Der Echtzeit-Thread bleibt entkoppelt, bis das Ende des Prüflings erreicht wird (4). Zuvor kann es zu beliebig vielen weiteren Unterbrechungen kommen (2 und 3).\relax \relax }{figure.caption.19}{}}
\newlabel{lst:decoupling}{{4.4}{82}{Implementierung der Funktion zur Umleitung, Entkopplung und Umschaltung des Aufrufstacks in Pseudocode. Der Parameter \emph {Mode} dient der Unterscheidung der verschiedenen Aufgaben. \emph {STORE} und \emph {XCHG} sind als Präprozessormacros realisiert. \emph {STORE} speichert die Werte der Stackregister in den angegebenen Variablen. \emph {XCHG} führt einen Austausch zwischen den Werten der Stackregister und den Werten der angegebenen Variablen durch}{lstlisting.4.4}{}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {4.4}Implementierung der Funktion zur Umleitung, Entkopplung und Umschaltung des Aufrufstacks in Pseudocode. Der Parameter \emph  {Mode} dient der Unterscheidung der verschiedenen Aufgaben. \emph  {STORE} und \emph  {XCHG} sind als Pr\"aprozessormacros realisiert. \emph  {STORE} speichert die Werte der Stackregister in den angegebenen Variablen. \emph  {XCHG} f\"uhrt einen Austausch zwischen den Werten der Stackregister und den Werten der angegebenen Variablen durch.}{82}{lstlisting.4.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.7}{\ignorespaces Separater Stackspeicher w\"ahrend der Initialisierung. Die Grenzen der verwendeten Speicherseite werden von den Zeigern \emph  {StackTop} und \emph  {StackBottom} markiert. Da alle Operationen f\"ur das Umschalten des Stacks in derselben Funktion implementiert sind, k\"onnen die bei der Initialisierung gespeicherten Adressen von Base- und Stack-Pointer f\"ur jeden Umschaltvorgang verwendet werden.\relax }}{83}{figure.caption.21}}
\newlabel{fig:separate-stack}{{4.7}{83}{Separater Stackspeicher während der Initialisierung. Die Grenzen der verwendeten Speicherseite werden von den Zeigern \emph {StackTop} und \emph {StackBottom} markiert. Da alle Operationen für das Umschalten des Stacks in derselben Funktion implementiert sind, können die bei der Initialisierung gespeicherten Adressen von Base- und Stack-Pointer für jeden Umschaltvorgang verwendet werden.\relax \relax }{figure.caption.21}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.4}Entkopplung des Aufrufstacks}{83}{subsubsection.4.4.3.4}}
\newlabel{sec:impl-runtime-stackforging-decouple}{{4.4.3.4}{83}{Entkopplung des Aufrufstacks\relax }{subsubsection.4.4.3.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.5}Fortsetzung der Ausf\"uhrung}{84}{subsubsection.4.4.3.5}}
\newlabel{sec:impl-runtime-stackforging-continue}{{4.4.3.5}{84}{Fortsetzung der Ausführung\relax }{subsubsection.4.4.3.5}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.6}Nachfolgende Unterbrechungen}{85}{subsubsection.4.4.3.6}}
\newlabel{sec:impl-runtime-stackforging-furtherbreaks}{{4.4.3.6}{85}{Nachfolgende Unterbrechungen\relax }{subsubsection.4.4.3.6}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.7}Ende der Verarbeitung des Pr\"uflings}{85}{subsubsection.4.4.3.7}}
\newlabel{sec:impl-runtime-stackforging-exit}{{4.4.3.7}{85}{Ende der Verarbeitung des Prüflings\relax }{subsubsection.4.4.3.7}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.4.3.8}Fazit}{86}{subsubsection.4.4.3.8}}
\newlabel{sec:impl-runtime-stackforging-conclusion}{{4.4.3.8}{86}{Fazit\relax }{subsubsection.4.4.3.8}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.5}Ablauf des Single-Stepping}{87}{section.4.5}}
\newlabel{sec:impl-stepping}{{4.5}{87}{Ablauf des Single-Stepping\relax }{section.4.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.8}{\ignorespaces Ausf\"uhrung eines Low-Pass Filters in Einzelschritten. Die Behandlung von Macros wurde bei der Implementierung des Prototypen ausgespart. Die Abbildung zeigt daher eine zu Abbildung \ref  {fig:low-pass-filter} \"aquivalente Version eines Low-Pass Filters in der alle Macros in ihre Bestandteile zerlegt wurden. Der Debug-Modus wurde durch einen Klick auf den Knopf mit dem Symbol eines K\"afers am linken Bildrand aktiviert.\relax }}{89}{figure.caption.22}}
\newlabel{fig:single-stepping}{{4.8}{89}{Ausführung eines Low-Pass Filters in Einzelschritten. Die Behandlung von Macros wurde bei der Implementierung des Prototypen ausgespart. Die Abbildung zeigt daher eine zu Abbildung \ref {fig:low-pass-filter} äquivalente Version eines Low-Pass Filters in der alle Macros in ihre Bestandteile zerlegt wurden. Der Debug-Modus wurde durch einen Klick auf den Knopf mit dem Symbol eines Käfers am linken Bildrand aktiviert.\relax \relax }{figure.caption.22}{}}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}Ergebnisse}{91}{chapter.5}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\newlabel{sec:outro}{{5}{91}{Ergebnisse\relax }{chapter.5}{}}
\gdef \LT@i {\LT@entry 
    {1}{173.2989pt}\LT@entry 
    {1}{248.58789pt}}
\newlabel{sec:glossary}{{5}{93}{Glossar\relax }{chapter*.23}{}}
\bibstyle{babalpha}
\bibdata{Diplomarbeit}
\bibcite{Replay}{ANCS00}
\bibcite{MacRealtime}{App12}
\bibcite{Compiler}{ASL{$^{+}$}08}
\bibcite{Audio101}{Ben11}
\bibcite{Realtime}{BJ98}
\bibcite{GenerativeProgramming}{CE00}
\bibcite{EndUserDevEnv}{CFMP04}
\bibcite{Duden}{CS03}
\bibcite{sql}{DD87}
\@writefile{toc}{\contentsline {chapter}{Literaturverzeichnis}{95}{chapter*.24}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{lol}{\addvspace {10\p@ }}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
\bibcite{DslCaseStudy}{Don10}
\bibcite{DosDebug}{Dun88}
\bibcite{Subtext}{Edw05}
\bibcite{LanguageWorkbenches}{Fow05a}
\bibcite{rake}{Fow05b}
\bibcite{gof}{GHVJ09}
\bibcite{Klangsynthese}{Hag01}
\bibcite{JHyde}{Her11}
\bibcite{Hughes}{Hug04}
\bibcite{Intel2}{Int12a}
\bibcite{Intel3}{Int12b}
\bibcite{DslEclipse}{JG04}
\bibcite{FastDataBreakpoints}{Kep93}
\bibcite{FastBreakpoints}{Kes90}
\bibcite{ComparingGplsAndDsls}{KOM{$^{+}$}10}
\bibcite{DslRequirements}{KPKP06}
\bibcite{Labview}{Lab12}
\bibcite{DbgBackwardsInTime}{Lew03}
\bibcite{Max}{Max12}
\bibcite{SuperCollider}{McC02}
\bibcite{Mernik05}{MHS05}
\bibcite{AlignedAlloc}{Mic12a}
\bibcite{VirtualAllocProtect}{Mic12b}
\bibcite{NullObjectPattern}{MRB98}
\bibcite{CoreReference}{Nat10}
\bibcite{Paxson}{PA90}
\bibcite{Reaktor}{Rea12}
\bibcite{HowDebuggersWork}{Ros96}
\bibcite{InterntionalSoftware}{SCC06}
\bibcite{AlgorithmicDebug}{Sha82}
\bibcite{DegreesOfFreedom}{Sim05}
\bibcite{Simulink}{Sim12}
\bibcite{Sparc}{SPA92}
\bibcite{Spinellis}{Spi01}
\bibcite{Steiner}{Ste06}
\bibcite{ReverseExecution}{TA95}
\bibcite{DslBib}{vDKV00}
\bibcite{atmol}{vE01}
\bibcite{mps}{VS10}
\bibcite{Ward}{War94}
\bibcite{FilterDesign}{Zav12}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
\select@language{ngerman}
\@writefile{toc}{\select@language{ngerman}}
\@writefile{lof}{\select@language{ngerman}}
\@writefile{lot}{\select@language{ngerman}}
